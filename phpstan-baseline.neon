parameters:
	ignoreErrors:
		-
			message: '#^Instanceof between mysqli_result\<array\<string, int\|string\|null\>\> and mysqli_result will always evaluate to true\.$#'
			count: 1
			path: src/DbSchema/SchemaHasherMysql.php

		-
			message: "#^Unresolvable Query\\: Cannot resolve query with variable type\\: non\\-empty\\-string\\.$#"
			count: 2
			path: src/Analyzer/QueryPlanAnalyzerMysql.php

		-
			message: "#^Instanceof between mysqli_result\\<array\\<string, int\\<\\-128, 127\\>\\|string\\|null\\>\\> and mysqli_result will always evaluate to true\\.$#"
			count: 1
			path: src/DbSchema/SchemaHasherMysql.php

		-
			message: "#^Strict comparison using \\!\\=\\= between null and PHPStan\\\\Type\\\\Type will always evaluate to true\\.$#"
			count: 1
			path: src/Extensions/PdoStatementFetchDynamicReturnTypeExtension.php

		-
			message: "#^Strict comparison using \\=\\=\\= between 'dibi' and 'dibi' will always evaluate to true\\.$#"
			count: 1
			path: src/QueryReflection/DbaApi.php

		-
			message: "#^Return type \\(array\\<int, array\\{name\\: string, table\\?\\: string, native_type\\: string, len\\: int, flags\\: array\\<int, string\\>\\}\\>\\|PDOException\\|null\\) of method staabm\\\\PHPStanDba\\\\QueryReflection\\\\PdoPgSqlQueryReflector\\:\\:simulateQuery\\(\\) should be covariant with return type \\(array\\<int, array\\{name\\: string, table\\: string, native_type\\: string, len\\: int, flags\\: array\\<int, string\\>, precision\\: int\\<0, max\\>, pdo_type\\: 0\\|1\\|2\\|3\\|4\\|5\\|6\\|536870912\\|1073741824\\|2147483648\\}\\>\\|PDOException\\|null\\) of method staabm\\\\PHPStanDba\\\\QueryReflection\\\\BasePdoQueryReflector\\:\\:simulateQuery\\(\\)$#"
			count: 1
			path: src/QueryReflection/PdoPgSqlQueryReflector.php

		-
			message: "#^Casting to \\*NEVER\\* something that's already \\*NEVER\\*\\.$#"
			count: 1
			path: src/QueryReflection/QueryReflection.php

		-
			message: "#^Instanceof between PHPStan\\\\Type\\\\Constant\\\\ConstantIntegerType and PHPStan\\\\Type\\\\Constant\\\\ConstantIntegerType will always evaluate to true\\.$#"
			count: 1
			path: src/QueryReflection/QueryReflection.php

		-
			message: "#^Strict comparison using \\=\\=\\= between null and null will always evaluate to true\\.$#"
			count: 1
			path: src/QueryReflection/QueryReflection.php

		-
			message: "#^Call to function is_string\\(\\) with string will always evaluate to true\\.$#"
			count: 2
			path: src/TypeMapping/MysqliTypeMapper.php

		-
			message: "#^Only booleans are allowed in an if condition, int given\\.$#"
			count: 1
			path: src/TypeMapping/MysqliTypeMapper.php
